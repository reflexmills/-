import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from datetime import datetime, timedelta
from calendar import monthrange
from telegram.ext import JobQueue
import sqlite3
import uuid
import requests
import json
import os
from dotenv import load_dotenv
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CRYPTO_BOT_TOKEN = os.getenv('CRYPTO_BOT_TOKEN')
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api"
EXCHANGE_RATE_URL = "https://api.exchangerate-api.com/v4/latest/USD"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, CRYPTO_BOT_TOKEN, ADMIN_IDS]):
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
PAYMENT_CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
KEEP_ALIVE_INTERVAL = 300    # 5 –º–∏–Ω—É—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_CHANNEL, GET_DATE, GET_TIME, GET_DURATION, CONFIRM_ORDER, ADMIN_BALANCE_CHANGE, GET_AMOUNT = range(7)

# –ö—É—Ä—Å USDT –∫ —Ä—É–±–ª—é (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
usdt_rate = 80.0  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    tables = [
        '''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            balance REAL DEFAULT 0,
            registration_date TEXT,
            last_activity TEXT
        )''',
        '''CREATE TABLE IF NOT EXISTS orders (
            order_id TEXT PRIMARY KEY,
            user_id INTEGER,
            platform TEXT,
            service TEXT,
            channel TEXT,
            stream_date TEXT,
            start_time TEXT,
            duration TEXT,
            amount REAL,
            status TEXT DEFAULT 'pending',
            payment_method TEXT,
            order_date TEXT,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )''',
        '''CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY
        )''',
        '''CREATE TABLE IF NOT EXISTS payments (
            invoice_id TEXT PRIMARY KEY,
            user_id INTEGER,
            amount REAL,
            currency TEXT DEFAULT 'RUB',
            status TEXT DEFAULT 'created',
            created_at TEXT,
            paid_at TEXT,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )'''
    ]
    
    for table in tables:
        cursor.execute(table)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (admin_id,))
    
    conn.commit()
    conn.close()

async def get_usdt_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é"""
    global usdt_rate
    try:
        response = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB")
        data = response.json()
        usdt_rate = float(data['price'])
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫—É—Ä—Å USDT: {usdt_rate} RUB")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å

def catch_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            return await func(update, context)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            raise
    return wrapped

@catch_errors
async def create_crypto_invoice(user_id: int, amount_rub: float):
    """–°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –ø–æ —Å—É–º–º–µ –≤ —Ä—É–±–ª—è—Ö"""
    await get_usdt_rate()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—á–µ—Ç–∞
    amount_usdt = round(amount_rub / usdt_rate, 2)
    
    headers = {
        'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
        'Content-Type': 'application/json'
    }
    
    payload = {
        "amount": amount_usdt,
        "asset": "USDT",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "paid_btn_name": "viewItem",
        "paid_btn_url": f"https://t.me/your_bot",
        "payload": str(user_id),
        "allow_comments": False,
        "allow_anonymous": False
    }
    
    response = requests.post(
        f"{CRYPTO_BOT_API_URL}/createInvoice",
        headers=headers,
        data=json.dumps(payload),
        timeout=10
    )
    response.raise_for_status()
    return response.json().get('result')

@catch_errors
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user.id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, last_name, registration_date, last_activity) VALUES (?, ?, ?, ?, ?, ?)",
            (user.id, user.username, user.first_name, user.last_name, 
             datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
             datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
    else:
        cursor.execute(
            "UPDATE users SET last_activity = ? WHERE user_id = ?",
            (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user.id)
        )
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    with open('welcome.jpg', 'rb') as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption=f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                    "–Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å"],
                    ["–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"]
                ],
                resize_keyboard=True
            )
        )

@catch_errors
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT balance, registration_date FROM users WHERE user_id = ?", (user.id,))
    balance, reg_date = cursor.fetchone()
    
    cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ?", (user.id,))
    orders_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(amount) FROM orders WHERE user_id = ? AND status = 'completed'", (user.id,))
    total_spent = cursor.fetchone()[0] or 0
    
    conn.close()
    
    await update.message.reply_text(
        text=f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
             f"üë§ –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
             f"üÜî ID: {user.id}\n"
             f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n\n"
             f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±\n"
             f"üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n"
             f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} —Ä—É–±",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
                ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
            ],
            resize_keyboard=True
        )
    )

@catch_errors
async def topup_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=ReplyKeyboardMarkup(
            [["500", "1000", "2000"], ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]],
            resize_keyboard=True
        )
    )
    return GET_AMOUNT

@catch_errors
async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        if amount < 100:
            await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 —Ä—É–±. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")
            return GET_AMOUNT
        
        context.user_data['topup_amount'] = amount
        
        await get_usdt_rate()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
        amount_usdt = round(amount / usdt_rate, 2)
        
        keyboard = [
            [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–± (~{amount_usdt} USDT)", callback_data='pay_crypto')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_payment')]
        ]
        
        await update.message.reply_text(
            text=f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä—É–± (~{amount_usdt} USDT)\n"
                 f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USDT = {usdt_rate:.2f} —Ä—É–±\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CONFIRM_ORDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return GET_AMOUNT

@catch_errors
async def process_crypto_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    amount = context.user_data['topup_amount']
    
    invoice = await create_crypto_invoice(user_id, amount)
    if not invoice:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO payments (invoice_id, user_id, amount, created_at) VALUES (?, ?, ?, ?)",
        (invoice['invoice_id'], user_id, amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    conn.commit()
    conn.close()
    
    await query.edit_message_text(
        text=f"üí≥ –°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω\n\n"
             f"–°—É–º–º–∞: {amount} —Ä—É–± (~{round(amount / usdt_rate, 2)} USDT)\n"
             f"üìä –ö—É—Ä—Å: 1 USDT = {usdt_rate:.2f} —Ä—É–±\n\n"
             f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {invoice['pay_url']}\n\n"
             f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{invoice["invoice_id"]}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )

@catch_errors
async def choose_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    with open('platforms.jpg', 'rb') as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["Twitch", "YouTube", "Kick"],
                    ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
                ],
                resize_keyboard=True
            )
        )

@catch_errors
async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    platform = update.message.text.lower()
    if platform not in ['twitch', 'youtube', 'kick']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return
    
    context.user_data['platform'] = platform
    
    prices = {
        'twitch': {'chat_ru': 250, 'chat_eng': 400, 'viewers': 1, 'followers': 1},
        'kick': {'chat_ru': 319, 'chat_eng': 419, 'viewers': 1, 'followers': 1},
        'youtube': {'chat_ru': 319, 'chat_eng': 419, 'viewers': 1, 'followers': 1}
    }
    
    keyboard = [
        [InlineKeyboardButton(f"üí¨ –ß–∞—Ç (RU) - {prices[platform]['chat_ru']} —Ä—É–±/—á–∞—Å", callback_data='service_chat_ru')],
        [InlineKeyboardButton(f"üí¨ –ß–∞—Ç (ENG) - {prices[platform]['chat_eng']} —Ä—É–±/—á–∞—Å", callback_data='service_chat_eng')],
        [InlineKeyboardButton(f"üëÄ –ó—Ä–∏—Ç–µ–ª–∏ - {prices[platform]['viewers']} —Ä—É–±/—á–∞—Å", callback_data='service_viewers')],
        [InlineKeyboardButton(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - {prices[platform]['followers']} —Ä—É–±/—á–∞—Å", callback_data='service_followers')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_platforms')]
    ]
    
    await update.message.reply_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: {platform.capitalize()}\n\n"
             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

@catch_errors
async def ask_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    service = query.data.split('_')[1]
    context.user_data['service'] = service
    
    await query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_services')]
        ])
    )
    
    return GET_CHANNEL

@catch_errors
async def get_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = update.message.text
    context.user_data['channel'] = channel
    
    await show_calendar(update, context)
    return GET_DATE

@catch_errors
async def show_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE, month=None, year=None):
    now = datetime.now()
    if not month:
        month = now.month
    if not year:
        year = now.year
    
    month_name = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                 '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][month-1]
    
    num_days = monthrange(year, month)[1]
    first_day = monthrange(year, month)[0]
    
    keyboard = []
    
    header = [
        InlineKeyboardButton("<", callback_data=f'calendar_{year}_{month-1}'),
        InlineKeyboardButton(f"{month_name} {year}", callback_data='ignore'),
        InlineKeyboardButton(">", callback_data=f'calendar_{year}_{month+1}')
    ]
    keyboard.append(header)
    
    week_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    keyboard.append([InlineKeyboardButton(day, callback_data='ignore') for day in week_days])
    
    day_buttons = []
    day_buttons.extend([InlineKeyboardButton(" ", callback_data='ignore') for _ in range(first_day)])
    
    for day in range(1, num_days + 1):
        date = datetime(year, month, day)
        if date.date() < now.date():
            day_buttons.append(InlineKeyboardButton(" ", callback_data='ignore'))
        else:
            day_buttons.append(InlineKeyboardButton(str(day), callback_data=f'calendar_select_{year}-{month}-{day}'))
        
        if len(day_buttons) % 7 == 0:
            keyboard.append(day_buttons)
            day_buttons = []
    
    if day_buttons:
        keyboard.append(day_buttons)
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_channel')])
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

@catch_errors
async def handle_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    query = update.callback_query
    
    if data.startswith('calendar_select_'):
        selected_date = data.split('_')[2]
        context.user_data['stream_date'] = selected_date
        
        await query.edit_message_text(
            text=f"1. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {context.user_data['platform'].capitalize()}\n"
                 f"2. –£—Å–ª—É–≥–∞: {get_service_name(context.user_data['service'])}\n"
                 f"3. –ö–∞–Ω–∞–ª: {context.user_data['channel']}\n"
                 f"4. –î–∞—Ç–∞: {selected_date.split('-')[2]}.{selected_date.split('-')[1]}.{selected_date.split('-')[0]}\n\n"
                 "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∏–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_calendar')]
            ])
        )
        
        return GET_TIME
    else:
        parts = data.split('_')
        year = int(parts[1])
        month = int(parts[2])
        
        if month == 0:
            month = 12
            year -= 1
        elif month == 13:
            month = 1
            year += 1
        
        await show_calendar(update, context, month, year)

@catch_errors
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text
    
    try:
        datetime.strptime(time_str, "%H:%M")
        context.user_data['start_time'] = time_str
        
        await update.message.reply_text(
            text=f"1. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {context.user_data['platform'].capitalize()}\n"
                 f"2. –£—Å–ª—É–≥–∞: {get_service_name(context.user_data['service'])}\n"
                 f"3. –ö–∞–Ω–∞–ª: {context.user_data['channel']}\n"
                 f"4. –î–∞—Ç–∞: {context.user_data['stream_date'].split('-')[2]}.{context.user_data['stream_date'].split('-')[1]}.{context.user_data['stream_date'].split('-')[0]}\n"
                 f"5. –í—Ä–µ–º—è: {time_str}\n\n"
                 "‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2:30):",
            reply_markup=ReplyKeyboardMarkup(
                [["1:00", "2:00", "3:00"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
        )
        
        return GET_DURATION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return GET_TIME

@catch_errors
async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration_str = update.message.text
    
    try:
        hours, minutes = map(int, duration_str.split(':'))
        if hours < 0 or minutes < 0 or minutes >= 60:
            raise ValueError
        
        context.user_data['duration'] = duration_str
        
        price_per_hour = get_price(context.user_data['platform'], context.user_data['service'])
        total_hours = hours + minutes / 60
        amount = round(price_per_hour * total_hours, 2)
        context.user_data['amount'] = amount
        
        await update.message.reply_text(
            text=f"üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
                 f"üîπ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {context.user_data['platform'].capitalize()}\n"
                 f"üîπ –£—Å–ª—É–≥–∞: {get_service_name(context.user_data['service'])}\n"
                 f"üîπ –ö–∞–Ω–∞–ª: {context.user_data['channel']}\n"
                 f"üîπ –î–∞—Ç–∞: {context.user_data['stream_date'].split('-')[2]}.{context.user_data['stream_date'].split('-')[1]}.{context.user_data['stream_date'].split('-')[0]}\n"
                 f"üîπ –í—Ä–µ–º—è: {context.user_data['start_time']}\n"
                 f"üîπ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"
                 f"üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='confirm_order')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
            ])
        )
        
        return CONFIRM_ORDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1:30):")
        return GET_DURATION

@catch_errors
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    order_data = context.user_data
    order_id = str(uuid.uuid4())[:8]
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    
    if balance >= order_data['amount']:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        cursor.execute(
            """INSERT INTO orders 
            (order_id, user_id, platform, service, channel, stream_date, start_time, duration, amount, order_date)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (order_id, user_id, order_data['platform'], order_data['service'], order_data['channel'],
             order_data['stream_date'], order_data['start_time'], order_data['duration'], 
             order_data['amount'], datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        cursor.execute(
            "UPDATE users SET balance = balance - ? WHERE user_id = ?",
            (order_data['amount'], user_id))
        
        conn.commit()
        
        await query.edit_message_text(
            text=f"üéâ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                 f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {order_data['amount']} —Ä—É–±.\n"
                 f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance - order_data['amount']:.2f} —Ä—É–±\n\n"
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='back_to_menu')]
            ])
        )
    else:
        await query.edit_message_text(
            text=f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
                 f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {order_data['amount']} —Ä—É–±\n"
                 f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±\n\n"
                 "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='topup_balance')],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_order')]
            ])
        )
    
    conn.close()
    return ConversationHandler.END

@catch_errors
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await start(update, context)
    return ConversationHandler.END

@catch_errors
async def back_to_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await choose_platform(update, context)
    return ConversationHandler.END

@catch_errors
async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await get_platform(update, context)
    return GET_CHANNEL

@catch_errors
async def back_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await ask_channel(update, context)
    return GET_CHANNEL

@catch_errors
async def back_to_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await show_calendar(update, context)
    return GET_DATE

@catch_errors
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )
    return ConversationHandler.END

@catch_errors
async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )
    return ConversationHandler.END

def get_service_name(service):
    services = {
        'chat_ru': '–ß–∞—Ç (RU)',
        'chat_eng': '–ß–∞—Ç (ENG)',
        'viewers': '–ó—Ä–∏—Ç–µ–ª–∏',
        'followers': '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'
    }
    return services.get(service, service)

def get_price(platform, service):
    prices = {
        'twitch': {'chat_ru': 250, 'chat_eng': 400, 'viewers': 1, 'followers': 1},
        'kick': {'chat_ru': 319, 'chat_eng': 419, 'viewers': 1, 'followers': 1},
        'youtube': {'chat_ru': 319, 'chat_eng': 419, 'viewers': 1, 'followers': 1}
    }
    return prices.get(platform, {}).get(service, 0)

def main():
    init_db()
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Text(["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]), show_profile))
    application.add_handler(MessageHandler(filters.Text(["–ü–æ–º–æ—â—å"]), show_help))
    application.add_handler(MessageHandler(filters.Text(["–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"]), choose_platform))
    application.add_handler(MessageHandler(filters.Text(["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"]), topup_balance))
    application.add_handler(MessageHandler(filters.Text(["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]), back_to_menu))
    application.add_handler(MessageHandler(filters.Text(["Twitch", "YouTube", "Kick"]), get_platform))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(process_crypto_payment, pattern='^pay_crypto$'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(back_to_platforms, pattern='^back_to_platforms$'))
    application.add_handler(CallbackQueryHandler(back_to_services, pattern='^back_to_services$'))
    application.add_handler(CallbackQueryHandler(back_to_channel, pattern='^back_to_channel$'))
    application.add_handler(CallbackQueryHandler(back_to_calendar, pattern='^back_to_calendar$'))
    application.add_handler(CallbackQueryHandler(cancel_order, pattern='^cancel_order$'))
    application.add_handler(CallbackQueryHandler(cancel_payment, pattern='^cancel_payment$'))
    
    # Conversation handler –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    topup_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"]), topup_balance)],
        states={
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            CONFIRM_ORDER: [CallbackQueryHandler(process_crypto_payment, pattern='^pay_crypto$')]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_payment, pattern='^cancel_payment$'),
            CommandHandler("start", start)
        ]
    )
    application.add_handler(topup_conv)
    
    # Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["Twitch", "YouTube", "Kick"]), get_platform)],
        states={
            GET_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel)],
            GET_DATE: [CallbackQueryHandler(handle_calendar, pattern='^calendar_')],
            GET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            GET_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
            CONFIRM_ORDER: [CallbackQueryHandler(confirm_order, pattern='^confirm_order$')]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_order, pattern='^cancel_order$'),
            CommandHandler("start", start)
        ],
        allow_reentry=True
    )
    application.add_handler(order_conv)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    application.job_queue.run_repeating(
        check_pending_payments,
        interval=PAYMENT_CHECK_INTERVAL,
        first=10
    )
    application.job_queue.run_repeating(
        get_usdt_rate,
        interval=3600,  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∫–∞–∂–¥—ã–π —á–∞—Å
        first=5
    )
    
    application.run_polling()

if __name__ == '__main__':
    main()
